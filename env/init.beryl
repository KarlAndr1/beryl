require-version "0"

let loaded-scripts = new table

let load-resource = function path do
	if path endswith? ".beryl" do # .beryl files get evaluated
		eval (read path)
	end elseif path endswith? ".beryldl" do # .beryldl files get loaded as dynamic libs
		load-dl path
	end else do # All other files are simply read as text files
		read path
	end
end

let contains? = function str substr do
	(str find: substr) =/= null
end

let split-path = function path do
	let sep-index = find-right path path-separator
	if sep-index == null do
		(array "." path)
	end else do
		(array 
			(substring path 0 sep-index)
			(substring path sep-index + 1 (sizeof path))
		)
	end
end

let require = function path do
	path str-replace= "/" path-separator
	
	path str-replace= "~" (cat (getenv "BERYL_SCRIPT_HOME") path-separator "libs")
	if (not path beginswith? path-separator) do
		path = cat script-dir path-separator path
	end

	if path in? loaded-scripts do
		loaded-scripts path
	end else do
		let global script-path = path
		
		let path-info = split-path path
		let global script-dir = path-info 0
		let script-file-name = path-info 1

		if (not script-file-name contains? ".") do
			let icode-path = path cat: ".beryl"
			let ncode-path = path cat: ".beryldl"
			if (file-exists? icode-path) do
				script-path = icode-path
			end elseif (file-exists? ncode-path) do
				script-path = ncode-path
			end
		end
		
		let res = load-resource script-path
		loaded-scripts insert= path res
		res
	end
end

let hold = function msg cond do
	if cond do
		printf "Holdpoint, %0%1" msg newline
		loop do
			let in = input ">"
			if in =/= "" do
				print (eval in catch-log null)
				true
			end else do
				false
			end
		end
	end
end

let docs = function name do
	try do
		let path = cat (getenv "BERYL_SCRIPT_HOME") path-separator "docs" path-separator name ".bdoc"
		cat "----------------" newline (strip (read path)) newline "----------------"
	end else "No documentation found"
end

let profile-script = (cat (getenv "HOME") path-separator ".beryl_profile")
if (file-exists? profile-script) do
	let global script-path = profile-script
	let global script-dir = (split-path profile-script) 0
	eval (read profile-script)
end

if (sizeof argv) == 0 do # Prompt
	let continue = true
	let global quit = function do
		continue = false
		null
	end
	
	let global script-path = "prompt.beryl"
	let global script-dir = "."
	
	print "Beryl" beryl-version
	print "Type `invoke quit` or nothing to quit"
	loop do
		let in = input ">"
		if in == "" do
			continue = false
		end
		
		let res = eval in catch-log with x do end
		if res =/= null do
			print res
		end
		continue
	end
end else do # Run script
	let global script-path = argv 0 # Set up script-path and script-dir
	let global script-dir = (split-path script-path) 0 # Get the directory
	
	let global argv = slice argv 1 (sizeof argv)
	
	let ret-code = 0
	eval (read script-path) catch-log with err do
		ret-code = 1
	end
	
	ret-code
end
